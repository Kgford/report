# Generated by Django 3.2 on 2021-09-07 15:17

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Coeffcal',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('stringname', models.CharField(blank=True, db_column='StringName', max_length=50, null=True)),
                ('string', models.CharField(blank=True, db_column='String', max_length=255, null=True)),
            ],
            options={
                'db_table': 'CoeffCal',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Devices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('devname', models.CharField(blank=True, db_column='DevName', max_length=100, null=True)),
                ('manufacturer', models.CharField(blank=True, db_column='Manufacturer', max_length=100, null=True)),
                ('devtype', models.CharField(blank=True, db_column='DevType', max_length=100, null=True)),
                ('defaultaddr', models.FloatField(blank=True, db_column='DefaultAddr', null=True)),
                ('timeout_ms', models.FloatField(blank=True, db_column='Timeout_ms', null=True)),
                ('termin', models.CharField(blank=True, db_column='Termin', max_length=100, null=True)),
                ('termout', models.CharField(blank=True, db_column='Termout', max_length=100, null=True)),
                ('eoi', models.BooleanField(blank=True, db_column='EOI', null=True)),
                ('idnresponse', models.CharField(blank=True, db_column='IDNResponse', max_length=100, null=True)),
                ('notes', models.CharField(blank=True, db_column='Notes', max_length=100, null=True)),
                ('manual', models.BooleanField(blank=True, db_column='Manual', null=True)),
                ('safecommand', models.CharField(blank=True, db_column='SafeCommand', max_length=100, null=True)),
                ('saferesponse', models.CharField(blank=True, db_column='SafeResponse', max_length=100, null=True)),
            ],
            options={
                'db_table': 'DEVICES',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Effeciency',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('workstation', models.CharField(blank=True, db_column='WorkStation', max_length=255, null=True)),
                ('jobnumber', models.CharField(blank=True, db_column='JobNumber', max_length=255, null=True)),
                ('partnumber', models.CharField(blank=True, db_column='PartNumber', max_length=255, null=True)),
                ('operator', models.CharField(blank=True, db_column='Operator', max_length=255, null=True)),
                ('activedate', models.CharField(blank=True, db_column='ActiveDate', max_length=255, null=True)),
                ('totaluuts', models.BigIntegerField(blank=True, db_column='TotalUUTs', null=True)),
                ('completeuuts', models.BigIntegerField(blank=True, db_column='CompleteUUTs', null=True)),
                ('effeciencystatus', models.CharField(blank=True, db_column='EffeciencyStatus', max_length=255, null=True)),
                ('runstatus', models.CharField(blank=True, db_column='RunStatus', max_length=255, null=True)),
            ],
            options={
                'db_table': 'Effeciency',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Graphdb3Db',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statename', models.CharField(blank=True, db_column='StateName', max_length=255, null=True)),
                ('pass_field', models.IntegerField(blank=True, db_column='PASS', null=True)),
                ('fail', models.IntegerField(blank=True, db_column='Fail', null=True)),
            ],
            options={
                'db_table': 'GRAPHDB_3dB',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GraphdbDir',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statename', models.CharField(blank=True, max_length=255, null=True)),
                ('pass_field', models.IntegerField(blank=True, db_column='PASS', null=True)),
                ('fail', models.IntegerField(blank=True, db_column='Fail', null=True)),
            ],
            options={
                'db_table': 'GRAPHDB_Dir',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Portconfig',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('jobnumber', models.CharField(blank=True, db_column='JobNumber', max_length=100, null=True)),
                ('partnumber', models.CharField(blank=True, db_column='PartNumber', max_length=100, null=True)),
                ('j1j1', models.CharField(blank=True, db_column='J1J1', max_length=100, null=True)),
                ('j1j2', models.CharField(blank=True, db_column='J1J2', max_length=100, null=True)),
                ('j1j3', models.CharField(blank=True, db_column='J1J3', max_length=100, null=True)),
                ('j1j4', models.CharField(blank=True, db_column='J1J4', max_length=100, null=True)),
                ('j1j5', models.CharField(blank=True, db_column='J1J5', max_length=100, null=True)),
                ('j2j1', models.CharField(blank=True, db_column='J2J1', max_length=100, null=True)),
                ('j2j2', models.CharField(blank=True, db_column='J2J2', max_length=100, null=True)),
                ('j2j3', models.CharField(blank=True, db_column='J2J3', max_length=100, null=True)),
                ('j2j4', models.CharField(blank=True, db_column='J2J4', max_length=100, null=True)),
                ('j3j1', models.CharField(blank=True, db_column='J3J1', max_length=100, null=True)),
                ('j3j2', models.CharField(blank=True, db_column='J3J2', max_length=100, null=True)),
                ('j3j3', models.CharField(blank=True, db_column='J3J3', max_length=100, null=True)),
                ('j3j4', models.CharField(blank=True, db_column='J3J4', max_length=100, null=True)),
                ('j4j1', models.CharField(blank=True, db_column='J4J1', max_length=100, null=True)),
                ('j4j2', models.CharField(blank=True, db_column='J4J2', max_length=100, null=True)),
                ('j4j3', models.CharField(blank=True, db_column='J4J3', max_length=100, null=True)),
                ('j4j4', models.CharField(blank=True, db_column='J4J4', max_length=100, null=True)),
            ],
            options={
                'db_table': 'PortConfig',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Specifications',
            fields=[
                ('specid', models.AutoField(db_column='SpecID', primary_key=True, serialize=False)),
                ('spectype', models.CharField(blank=True, db_column='SpecType', max_length=100, null=True)),
                ('jobnumber', models.CharField(blank=True, db_column='JobNumber', max_length=100, null=True)),
                ('partnumber', models.CharField(blank=True, db_column='PartNumber', max_length=100, null=True)),
                ('title', models.CharField(blank=True, db_column='Title', max_length=100, null=True)),
                ('quantity', models.IntegerField(blank=True, db_column='Quantity', null=True)),
                ('startfreqmhz', models.FloatField(blank=True, db_column='StartFreqMHz', null=True)),
                ('stopfreqmhz', models.FloatField(blank=True, db_column='StopFreqMHz', null=True)),
                ('cutofffreqmhz', models.FloatField(blank=True, db_column='CutOffFreqMHz', null=True)),
                ('outputportnumber', models.FloatField(blank=True, db_column='OutputPortNumber', null=True)),
                ('vswr', models.FloatField(blank=True, db_column='VSWR', null=True)),
                ('insertionloss', models.FloatField(blank=True, db_column='InsertionLoss', null=True)),
                ('isolation', models.FloatField(blank=True, db_column='Isolation', null=True)),
                ('isolation2', models.FloatField(blank=True, db_column='Isolation2', null=True)),
                ('amplitudebalance', models.FloatField(blank=True, db_column='AmplitudeBalance', null=True)),
                ('coupling', models.FloatField(blank=True, db_column='Coupling', null=True)),
                ('coupplusminus', models.FloatField(blank=True, db_column='COUPPlusMinus', null=True)),
                ('directivity', models.FloatField(blank=True, db_column='Directivity', null=True)),
                ('phasebalance', models.FloatField(blank=True, db_column='PhaseBalance', null=True)),
                ('coupledflatness', models.FloatField(blank=True, db_column='CoupledFlatness', null=True)),
                ('power', models.FloatField(blank=True, db_column='Power', null=True)),
                ('temperature', models.FloatField(blank=True, db_column='Temperature', null=True)),
                ('offset1', models.FloatField(blank=True, db_column='Offset1', null=True)),
                ('offset2', models.FloatField(blank=True, db_column='Offset2', null=True)),
                ('offset3', models.FloatField(blank=True, db_column='Offset3', null=True)),
                ('offset4', models.FloatField(blank=True, db_column='Offset4', null=True)),
                ('offset5', models.FloatField(blank=True, db_column='Offset5', null=True)),
                ('test1', models.IntegerField(blank=True, db_column='Test1', null=True)),
                ('test2', models.IntegerField(blank=True, db_column='Test2', null=True)),
                ('test3', models.IntegerField(blank=True, db_column='Test3', null=True)),
                ('test4', models.IntegerField(blank=True, db_column='Test4', null=True)),
                ('test5', models.IntegerField(blank=True, db_column='Test5', null=True)),
                ('pph', models.FloatField(db_column='PPH')),
                ('po', models.CharField(blank=True, db_column='PO', max_length=1000, null=True)),
                ('datecode', models.CharField(blank=True, db_column='DateCode', max_length=100, null=True)),
                ('bypass', models.IntegerField(db_column='Bypass')),
                ('password', models.CharField(blank=True, db_column='Password', max_length=150, null=True)),
                ('globalfail', models.FloatField(blank=True, db_column='GlobalFail', null=True)),
                ('testfail', models.FloatField(blank=True, db_column='TestFail', null=True)),
                ('retestfail', models.FloatField(blank=True, db_column='RetestFail', null=True)),
                ('failpercent', models.FloatField(blank=True, db_column='FailPercent', null=True)),
                ('ab_exp_tf', models.BooleanField(blank=True, db_column='AB_exp_tf', null=True)),
                ('ab_ex', models.FloatField(blank=True, db_column='AB_ex', null=True)),
                ('ab_start1', models.FloatField(blank=True, db_column='AB_start1', null=True)),
                ('ab_start2', models.FloatField(blank=True, db_column='AB_start2', null=True)),
                ('ab_stop1', models.FloatField(blank=True, db_column='AB_stop1', null=True)),
                ('ab_stop2', models.FloatField(blank=True, db_column='AB_stop2', null=True)),
                ('ab_tf', models.IntegerField(blank=True, db_column='AB_tf', null=True)),
            ],
            options={
                'db_table': 'Specifications',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sysdiagrams',
            fields=[
                ('name', models.CharField(max_length=128)),
                ('principal_id', models.IntegerField()),
                ('diagram_id', models.AutoField(primary_key=True, serialize=False)),
                ('version', models.IntegerField(blank=True, null=True)),
                ('definition', models.BinaryField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sysdiagrams',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Testdata',
            fields=[
                ('testid', models.AutoField(db_column='TestID', primary_key=True, serialize=False)),
                ('specid', models.IntegerField(blank=True, db_column='SpecID', null=True)),
                ('jobnumber', models.CharField(blank=True, db_column='JobNumber', max_length=100, null=True)),
                ('partnumber', models.CharField(blank=True, db_column='PartNumber', max_length=100, null=True)),
                ('serialnumber', models.CharField(blank=True, db_column='SerialNumber', max_length=100, null=True)),
                ('workstation', models.CharField(blank=True, db_column='WorkStation', max_length=100, null=True)),
                ('insertionloss', models.FloatField(blank=True, db_column='InsertionLoss', null=True)),
                ('returnloss', models.FloatField(blank=True, db_column='ReturnLoss', null=True)),
                ('coupling', models.FloatField(blank=True, db_column='Coupling', null=True)),
                ('isolation', models.FloatField(blank=True, db_column='Isolation', null=True)),
                ('directivity', models.FloatField(blank=True, db_column='Directivity', null=True)),
                ('amplitudebalance', models.FloatField(blank=True, db_column='AmplitudeBalance', null=True)),
                ('coupledflatness', models.FloatField(blank=True, db_column='CoupledFlatness', null=True)),
                ('phasebalance', models.FloatField(blank=True, db_column='PhaseBalance', null=True)),
                ('failurelog', models.CharField(blank=True, db_column='FailureLog', max_length=255, null=True)),
                ('artwork_rev', models.CharField(blank=True, max_length=50, null=True)),
                ('amplitudebalance1', models.FloatField(blank=True, db_column='AmplitudeBalance1', null=True)),
                ('amplitudebalance2', models.FloatField(blank=True, db_column='AmplitudeBalance2', null=True)),
                ('isolation2', models.FloatField(blank=True, db_column='Isolation2', null=True)),
            ],
            options={
                'db_table': 'TestData',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Testdata3',
            fields=[
                ('testid', models.AutoField(db_column='TestID', primary_key=True, serialize=False)),
                ('specid', models.IntegerField(blank=True, db_column='SpecID', null=True)),
                ('jobnumber', models.CharField(blank=True, db_column='JobNumber', max_length=100, null=True)),
                ('partnumber', models.CharField(blank=True, db_column='PartNumber', max_length=100, null=True)),
                ('serialnumber', models.CharField(blank=True, db_column='SerialNumber', max_length=100, null=True)),
                ('workstation', models.CharField(blank=True, db_column='WorkStation', max_length=100, null=True)),
                ('insertionloss', models.FloatField(blank=True, db_column='InsertionLoss', null=True)),
                ('returnloss', models.FloatField(blank=True, db_column='ReturnLoss', null=True)),
                ('coupling', models.FloatField(blank=True, db_column='Coupling', null=True)),
                ('isolation', models.FloatField(blank=True, db_column='Isolation', null=True)),
                ('directivity', models.FloatField(blank=True, db_column='Directivity', null=True)),
                ('amplitudebalance', models.FloatField(blank=True, db_column='AmplitudeBalance', null=True)),
                ('coupledflatness', models.FloatField(blank=True, db_column='CoupledFlatness', null=True)),
                ('phasebalance', models.FloatField(blank=True, db_column='PhaseBalance', null=True)),
                ('failurelog', models.FloatField(blank=True, db_column='FailureLog', null=True)),
            ],
            options={
                'db_table': 'TestData3',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Trace',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('testid', models.IntegerField(blank=True, db_column='TestID', null=True)),
                ('specid', models.IntegerField(blank=True, db_column='SpecID', null=True)),
                ('jobnumber', models.CharField(blank=True, db_column='JobNumber', max_length=100, null=True)),
                ('title', models.CharField(blank=True, db_column='Title', max_length=100, null=True)),
                ('serialnumber', models.CharField(blank=True, db_column='SerialNumber', max_length=100, null=True)),
                ('workstation', models.CharField(blank=True, db_column='WorkStation', max_length=100, null=True)),
                ('points', models.IntegerField(blank=True, db_column='Points', null=True)),
                ('activedate', models.DateTimeField(blank=True, db_column='ActiveDate', null=True)),
                ('rfpower', models.FloatField(blank=True, db_column='RFPower', null=True)),
                ('temperature', models.FloatField(blank=True, db_column='Temperature', null=True)),
                ('calibrationdate', models.DateTimeField(blank=True, db_column='CalibrationDate', null=True)),
                ('instrumentcaldue', models.DateTimeField(blank=True, db_column='InstrumentCalDue', null=True)),
                ('progtitle', models.CharField(blank=True, db_column='ProgTitle', max_length=100, null=True)),
                ('progversion', models.CharField(blank=True, db_column='ProgVersion', max_length=100, null=True)),
                ('xtitle', models.CharField(blank=True, db_column='XTitle', max_length=100, null=True)),
                ('ytitle', models.CharField(blank=True, db_column='YTitle', max_length=100, null=True)),
                ('notes', models.CharField(blank=True, db_column='Notes', max_length=255, null=True)),
            ],
            options={
                'db_table': 'Trace',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Traceimage',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('testid', models.IntegerField(blank=True, db_column='TestID', null=True)),
                ('specid', models.IntegerField(blank=True, db_column='SpecID', null=True)),
                ('jobnumber', models.CharField(blank=True, db_column='JobNumber', max_length=100, null=True)),
                ('title', models.CharField(blank=True, db_column='Title', max_length=100, null=True)),
                ('serialnumber', models.CharField(blank=True, db_column='SerialNumber', max_length=100, null=True)),
                ('workstation', models.CharField(blank=True, db_column='WorkStation', max_length=100, null=True)),
                ('points', models.IntegerField(blank=True, db_column='Points', null=True)),
                ('activedate', models.DateTimeField(blank=True, db_column='ActiveDate', null=True)),
                ('rfpower', models.FloatField(blank=True, db_column='RFPower', null=True)),
                ('temperature', models.FloatField(blank=True, db_column='Temperature', null=True)),
                ('calibrationdate', models.DateTimeField(blank=True, db_column='CalibrationDate', null=True)),
                ('instrumentcaldue', models.DateTimeField(blank=True, db_column='InstrumentCalDue', null=True)),
                ('progtitle', models.CharField(blank=True, db_column='ProgTitle', max_length=100, null=True)),
                ('progversion', models.CharField(blank=True, db_column='ProgVersion', max_length=100, null=True)),
                ('xtitle', models.CharField(blank=True, db_column='XTitle', max_length=100, null=True)),
                ('ytitle', models.CharField(blank=True, db_column='YTitle', max_length=100, null=True)),
                ('notes', models.CharField(blank=True, db_column='Notes', max_length=255, null=True)),
            ],
            options={
                'db_table': 'TraceImage',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Traceimagepoints',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('traceid', models.IntegerField(blank=True, db_column='TraceID', null=True)),
                ('idx', models.IntegerField(blank=True, db_column='Idx', null=True)),
                ('xdata', models.FloatField(blank=True, db_column='Xdata', null=True)),
                ('ydata', models.FloatField(blank=True, db_column='Ydata', null=True)),
                ('coeffcal', models.FloatField(blank=True, db_column='CoeffCal', null=True)),
            ],
            options={
                'db_table': 'TraceImagePoints',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tracepoints',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('traceid', models.IntegerField(blank=True, db_column='TraceID', null=True)),
                ('idx', models.IntegerField(blank=True, db_column='Idx', null=True)),
                ('xdata', models.FloatField(blank=True, db_column='Xdata', null=True)),
                ('ydata', models.FloatField(blank=True, db_column='Ydata', null=True)),
                ('coeffcal', models.FloatField(blank=True, db_column='CoeffCal', null=True)),
            ],
            options={
                'db_table': 'TracePoints',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tracepoints2',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('traceid', models.IntegerField(blank=True, db_column='TraceID', null=True)),
                ('idx', models.IntegerField(blank=True, db_column='Idx', null=True)),
                ('xdata', models.FloatField(blank=True, db_column='Xdata', null=True)),
                ('ydata', models.FloatField(blank=True, db_column='Ydata', null=True)),
                ('coeffcal', models.FloatField(blank=True, db_column='CoeffCal', null=True)),
            ],
            options={
                'db_table': 'TracePoints2',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tracestr',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('traceid', models.IntegerField(db_column='TraceID')),
                ('xdata', models.TextField(blank=True, db_column='XData', null=True)),
                ('ydata', models.TextField(blank=True, db_column='YData', null=True)),
            ],
            options={
                'db_table': 'TraceStr',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Workstation',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('computername', models.CharField(blank=True, db_column='ComputerName', max_length=100, null=True)),
                ('workstationname', models.CharField(blank=True, db_column='WorkstationName', max_length=100, null=True)),
                ('vnatype', models.CharField(blank=True, db_column='VNAType', max_length=100, null=True)),
                ('operator', models.CharField(blank=True, db_column='Operator', max_length=50, null=True)),
                ('vnafreq', models.FloatField(blank=True, db_column='VNAFreq', null=True)),
                ('password', models.CharField(blank=True, db_column='Password', max_length=150, null=True)),
            ],
            options={
                'db_table': 'WorkStation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Workstation1',
            fields=[
                ('id', models.IntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('computername', models.CharField(blank=True, db_column='ComputerName', max_length=100, null=True)),
                ('workstationname', models.CharField(blank=True, db_column='WorkstationName', max_length=100, null=True)),
                ('vnatype', models.CharField(blank=True, db_column='VNAType', max_length=100, null=True)),
                ('operator', models.CharField(blank=True, db_column='Operator', max_length=50, null=True)),
                ('vnafreq', models.FloatField(blank=True, db_column='VNAFreq', null=True)),
            ],
            options={
                'db_table': 'WorkStation1',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Test_Events',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_number', models.CharField(default='N/A', max_length=50, null=True, verbose_name='job_number')),
                ('part_number', models.CharField(default='N/A', max_length=50, null=True, verbose_name='part_number')),
                ('order_list_header_id', models.IntegerField(db_column='order_list_header_id')),
                ('order_list_detail_id', models.IntegerField(db_column='order_list_detail_id ')),
                ('event_type', models.CharField(db_column='event_type', max_length=20)),
                ('event_time', models.DateTimeField(blank=True, db_column='event_time', null=True)),
                ('description', models.CharField(default='N/A', max_length=50, null=True, verbose_name='description')),
                ('priority', models.CharField(blank=True, db_column='Priority', max_length=50, null=True)),
                ('severity', models.CharField(blank=True, db_column='Severity', max_length=50, null=True)),
                ('impact', models.CharField(blank=True, db_column='Impact', max_length=50, null=True)),
                ('cost', models.DecimalField(blank=True, db_column='cost', decimal_places=8, max_digits=18, null=True)),
                ('update_by', models.CharField(default='N/A', max_length=50, verbose_name='update_by')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'test_events',
                'managed': True,
            },
        ),
    ]
